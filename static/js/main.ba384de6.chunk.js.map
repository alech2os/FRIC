{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/AnswerOption.js","components/MultiChoice.js","components/TextInput.js","components/PopOver.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","key","answers","type","goto","content","result","Question","props","react_default","a","createElement","className","AnswerOption","name","checked","answerType","answer","id","value","answerGoto","disabled","onChange","onAnswerSelected","htmlFor","answerContent","MultiChoice","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","questionId","components_Question","answerOptions","map","console","log","undefined","v","components_AnswerOption","styles","theme","button","margin","spacing","unit","container","display","flexWrap","cssLabel","&$cssFocused","color","purple","cssFocused","cssUnderline","&:after","borderBottomColor","cssOutlinedInput","&$cssFocused $notchedOutline","borderColor","notchedOutline","bootstrapRoot","label + &","marginTop","bootstrapInput","borderRadius","backgroundColor","palette","common","white","border","fontSize","padding","transition","transitions","create","fontFamily","join","&:focus","boxShadow","bootstrapFormLabel","TextInput","TextField_default","InputLabelProps","root","focused","InputProps","multiline","rowsMax","label","variant","style","readOnly","marginLeft","width","onValueChange","defaultValue","Button_default","onClick","onAnswerInput","PopOver","DialogTitle_default","title","DialogContent_default","DialogContentText_default","DialogActions_default","handleClose","Result","e","handleClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickOpen","setState","open","state","counter","text","handleAnswerSelected","bind","assertThisInitialized","handleAnswerInput","handleTextChange","AnswerOptions","str","String","match","event","_this2","setUserAnswer","currentTarget","checkReturn","setTimeout","setResults","setNextQuestion","preventDefault","window","location","reload","document","getElementById","parseInt","length","components_TextInput","questionTotal","components_MultiChoice","components_Result","Dialog_default","onClose","aria-labelledby","aria-describedby","children","components_PopOver","renderHintHelper","classes","renderResult","renderQuiz","justifyContent","renderHint","Component","withStyles","Boolean","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba384de6.chunk.js","sourcesContent":["var quizQuestions = [\r\n    {\r\n        question: \"What is the emergency?\",\r\n        key: 0,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"What Department?\",\r\n        key: 1,\r\n        answers: [{\r\n                type: \"foo\",\r\n                goto: 2,\r\n                content: \"1. Police\"\r\n            },\r\n            {\r\n                type: \"bar\",\r\n                goto: 2,\r\n                content: \"2. Fire\"\r\n            },\r\n            {\r\n                type: \"baz\",\r\n                goto: 3,\r\n                content: \"3. Both\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Where is the emergency?\",\r\n        key: 2,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"What is the patient's sex?\",\r\n        key: 3,\r\n        answers: []\r\n    },   \r\n    {\r\n        question: \"What is the patient's age?\",\r\n        key: 4,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"Is the person conscious?\",\r\n        key: 5,\r\n        answers: [{\r\n                type: \"foo\",\r\n                goto: 6,\r\n                content: \"Yes\"\r\n            },\r\n            {\r\n                type: \"bar\",\r\n                goto: 7,\r\n                content: \"No\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"What is the telephone # you are calling from?\",\r\n        key: 6,\r\n        answers: []\r\n    },\r\n    {\r\n        question: \"Is the person breathing normally?\",\r\n        key: 7,\r\n        answers: [{\r\n            type: \"foo\",\r\n            result: \"9R1\",\r\n            content: \"Yes\"\r\n            },\r\n            {\r\n                type: \"bar\",\r\n                result: \"1M1\",\r\n                content: \"No\"\r\n            }\r\n        ]\r\n    },\r\n\r\n];\r\n\r\nexport default quizQuestions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Question(props) {\r\n  return <h2 className=\"question\">{props.content}</h2>;\r\n}\r\n\r\nQuestion.propTypes = {\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AnswerOption(props) {\r\n  return (\r\n    <li className=\"answerOption\">\r\n      <input\r\n        type=\"radio\"\r\n        className=\"radioCustomButton\"\r\n        name=\"radioGroup\"\r\n        checked={props.answerType === props.answer}\r\n        id={props.answerType}\r\n        value={props.answerGoto}\r\n        disabled={props.answer}\r\n        onChange={props.onAnswerSelected}\r\n      />\r\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n        {props.answerContent}\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n  answerType: PropTypes.string.isRequired,\r\n  answerGoto: PropTypes.string.isRequired,\r\n  answerContent: PropTypes.string.isRequired,\r\n  answer: PropTypes.string.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AnswerOption;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport Question from '../components/Question';\r\nimport AnswerOption from '../components/AnswerOption';\r\n\r\nfunction MultiChoice(props) {\r\n  function renderAnswerOptions(key) {\r\n    console.log(key.result === undefined)\r\n    let v = 0\r\n    if (key.result === undefined) {\r\n      v = key.goto\r\n    } else {\r\n      v = key.result\r\n    }\r\n    return (\r\n      <AnswerOption\r\n        key={key.content}\r\n        answerContent={key.content}\r\n        answerGoto={v}\r\n        answerType={key.type}\r\n        answer={props.answer}\r\n        questionId={props.questionId}\r\n        onAnswerSelected={props.onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div key={props.questionId}>\r\n        {/* <QuestionCount counter={props.questionId} total={props.questionTotal} /> */}\r\n        <Question content={props.question} />\r\n        <ul className=\"answerOptions\">\r\n          {props.answerOptions.map(renderAnswerOptions)}\r\n        </ul>\r\n      </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nMultiChoice.propTypes = {\r\n  answer: PropTypes.string.isRequired,\r\n  answerOptions: PropTypes.array.isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  questionId: PropTypes.number.isRequired,\r\n  questionTotal: PropTypes.number.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MultiChoice;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport Question from './Question';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AnswerOption from '../components/AnswerOption';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst styles = theme => ({\r\n  button: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  cssLabel: {\r\n    '&$cssFocused': {\r\n      color: purple[500],\r\n    },\r\n  },\r\n  cssFocused: {},\r\n  cssUnderline: {\r\n    '&:after': {\r\n      borderBottomColor: purple[500],\r\n    },\r\n  },\r\n  cssOutlinedInput: {\r\n    '&$cssFocused $notchedOutline': {\r\n      borderColor: purple[500],\r\n    },\r\n  },\r\n  notchedOutline: {},\r\n  bootstrapRoot: {\r\n    'label + &': {\r\n      marginTop: theme.spacing.unit * 3,\r\n    },\r\n  },\r\n  bootstrapInput: {\r\n    borderRadius: 4,\r\n    backgroundColor: theme.palette.common.white,\r\n    border: '1px solid #ced4da',\r\n    fontSize: 16,\r\n    padding: '10px 12px',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n    '&:focus': {\r\n      borderColor: '#80bdff',\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n    },\r\n  },\r\n  bootstrapFormLabel: {\r\n    fontSize: 18,\r\n  },\r\n});\r\n\r\nfunction TextInput(props) {\r\n      // return (\r\n        // <AnswerOption\r\n  //         key={key.content}\r\n  //         answerContent={key.content}\r\n  //         answerType={key.type}\r\n  //         answer={props.answer}\r\n  //         questionId={props.questionId}\r\n          // onAnswerSelected={props.onAnswerSelected}\r\n        // />\r\n      // );\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <div>\r\n        {/* <QuestionCount counter={props.questionId} total={props.questionTotal} /> */}\r\n        <Question content={props.question} />\r\n        {/* <ul className=\"answerOptions\">\r\n          {props.answerOptions.map(renderAnswerOptions)}\r\n        </ul> */}\r\n        <form>\r\n         <TextField\r\n            className={styles.margin}\r\n            InputLabelProps={{\r\n              styles: {\r\n                root: styles.cssLabel,\r\n                focused: styles.cssFocused,\r\n              },\r\n            }}\r\n            InputProps={{\r\n              styles: {\r\n                root: styles.cssOutlinedInput,\r\n                focused: styles.cssFocused,\r\n                notchedOutline: styles.notchedOutline,\r\n              },\r\n            }}\r\n            multiline\r\n            rowsMax=\"4\"\r\n            label=\"txt\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                readOnly: true,\r\n                marginLeft: '2.5rem',\r\n                width: 400,\r\n              }\r\n            }\r\n            onChange={props.onValueChange}\r\n            id=\"txt\"\r\n            defaultValue=\"\"\r\n          />\r\n          <br />\r\n          <Button variant=\"contained\" className={styles.button} onClick={props.onAnswerInput}\r\n          style={\r\n            {\r\n              margin: 20,\r\n              marginLeft: '2.5rem',\r\n            }\r\n          }>\r\n            Submit\r\n          </Button>\r\n          </form>\r\n      </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  answer: PropTypes.string.isRequired,\r\n  answerOptions: PropTypes.array.isRequired,\r\n  question: PropTypes.string.isRequired,\r\n  questionId: PropTypes.number.isRequired,\r\n  questionTotal: PropTypes.number.isRequired,\r\n  onAnswerInput: PropTypes.func.isRequired,\r\n  onValueChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TextInput;\r\n//   function renderAnswerOptions(key) {\r\n//     return (\r\n//       <AnswerOption\r\n//         key={key.content}\r\n//         answerContent={key.content}\r\n//         answerType={key.type}\r\n//         answer={props.answer}\r\n//         questionId={props.questionId}\r\n//         onAnswerSelected={props.onAnswerSelected}\r\n//       />\r\n//     );\r\n//   }\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction PopOver(props) {\r\n  return (\r\n    <div>\r\n        <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {props.content}\r\n        </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={props.handleClose} color=\"primary\">\r\n            Got it!\r\n            </Button>\r\n        </DialogActions>\r\n    </div>\r\n  );\r\n}\r\n\r\nPopOver.propTypes = {\r\n  content: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  handleClose: PropTypes.func.isRequired\r\n};\r\n\r\nexport default PopOver\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <CSSTransitionGroup\r\n      className=\"container result\"\r\n      component=\"div\"\r\n      transitionName=\"fade\"\r\n      transitionEnterTimeout={800}\r\n      transitionLeaveTimeout={500}\r\n      transitionAppear\r\n      transitionAppearTimeout={500}\r\n    >\r\n      <Button variant=\"contained\" onClick={(e) => { props.handleClick(e) }}\r\n        style={\r\n          {\r\n            margin: 30,\r\n            marginLeft: 300\r\n          }\r\n        }>\r\n        Next\r\n      </Button>\r\n\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\n\r\n\r\nResult.propTypes = {\r\n  handleClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\r\nimport quizQuestions from './api/quizQuestions';\r\nimport MultiChoice from './components/MultiChoice';\r\nimport TextInput from './components/TextInput'\r\nimport './App.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PopOver from './components/PopOver';\r\nimport Result from './components/Result';\r\n\r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  cssLabel: {\r\n    '&$cssFocused': {\r\n      color: purple[500],\r\n    },\r\n  },\r\n  cssFocused: {},\r\n  cssUnderline: {\r\n    '&:after': {\r\n      borderBottomColor: purple[500],\r\n    },\r\n  },\r\n  cssOutlinedInput: {\r\n    '&$cssFocused $notchedOutline': {\r\n      borderColor: purple[500],\r\n    },\r\n  },\r\n  notchedOutline: {},\r\n  bootstrapRoot: {\r\n    'label + &': {\r\n      marginTop: theme.spacing.unit * 3,\r\n    },\r\n  },\r\n  bootstrapInput: {\r\n    borderRadius: 4,\r\n    backgroundColor: theme.palette.common.white,\r\n    border: '1px solid #ced4da',\r\n    fontSize: 16,\r\n    padding: '10px 12px',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    // Use the system font instead of the default Roboto font.\r\n    fontFamily: [\r\n      '-apple-system',\r\n      'BlinkMacSystemFont',\r\n      '\"Segoe UI\"',\r\n      'Roboto',\r\n      '\"Helvetica Neue\"',\r\n      'Arial',\r\n      'sans-serif',\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(','),\r\n    '&:focus': {\r\n      borderColor: '#80bdff',\r\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n    },\r\n  },\r\n  bootstrapFormLabel: {\r\n    fontSize: 18,\r\n  },\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      counter: 0,\r\n      questionId: 1,\r\n      question: '',\r\n      answerOptions: [],\r\n      answer: '',\r\n      result: '',\r\n      goto: '',\r\n      text: '',\r\n      open: false,\r\n    };\r\n\r\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n    this.handleAnswerInput = this.handleAnswerInput.bind(this)\r\n    this.handleTextChange = this.handleTextChange.bind(this)\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  componentWillMount() {\r\n    const AnswerOptions = quizQuestions.map(question =>\r\n      question.answers\r\n    );\r\n    this.setState({\r\n      question: quizQuestions[0].question,\r\n      answerOptions: AnswerOptions[0],\r\n    });\r\n    // if (document.getElementById('txt') !== undefined) {\r\n      //  document.getElementById('txt').value = \"\"\r\n    // }\r\n  }\r\n\r\n  checkReturn(str) {\r\n    return String(str).match(/[a-z]/i)\r\n  }\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  handleAnswerSelected(event) {\r\n    // console.log(event.currentTarget.value)\r\n    this.setUserAnswer(event.currentTarget.value);\r\n    console.log(\"type: \" + typeof this.state.goto)\r\n    console.log(\"value1 \" + this.state.goto)\r\n    if (this.checkReturn(event.currentTarget.value)) {\r\n      console.log(\"type2 \" + typeof this.state.goto)\r\n      setTimeout(() => this.setResults(), 300);\r\n    } else {\r\n      console.log(\"type3 \" + typeof this.state.goto)\r\n      console.log(\"value: \" + this.state.goto)\r\n      setTimeout(() => this.setNextQuestion(), 300);\r\n    }\r\n  }\r\n\r\n  handleTextChange(event) {\r\n    this.setState({\r\n      text: event.currentTarget.value\r\n    });\r\n  }\r\n\r\n  handleClick(e) {\r\n    e.preventDefault();\r\n    window.location.reload()\r\n  }\r\n  \r\n\r\n\r\n  handleAnswerInput(event) {\r\n\r\n    if (this.state.question.match(/What is the emergency/i)) {\r\n      document.getElementById('report').value = this.state.text\r\n      document.getElementById('txt').value = \"\"\r\n    }\r\n    if (this.state.question.match(/telephone/i)) {\r\n      document.getElementById('phone').value = this.state.text\r\n      document.getElementById('txt').value = \"\"\r\n    }\r\n    if (this.state.question.match(/where/i)) {\r\n      document.getElementById('location').value = this.state.text\r\n      document.getElementById('txt').value = \"\"\r\n    }\r\n\r\n    if (this.state.question.match(/sex/i)) {\r\n      document.getElementById('sex').value = this.state.text\r\n      document.getElementById('txt').value = \"\"\r\n    }\r\n\r\n    if (this.state.question.match(/age/i)) {\r\n      document.getElementById('age').value = this.state.text\r\n      document.getElementById('txt').value = \"\"\r\n    }\r\n\r\n    this.setNextQuestion()\r\n  }\r\n\r\n  setUserAnswer(answer) {\r\n    this.setState({\r\n      goto: answer\r\n    });\r\n  }\r\n\r\n  setNextQuestion() {\r\n    let counter = parseInt(this.state.counter) + 1;\r\n    console.log(\"goto1: \" + this.state.goto)\r\n    console.log(\"counter1: \" + counter)\r\n    if (this.state.goto.length !== 0) {\r\n      counter = parseInt(this.state.goto);\r\n    }\r\n    console.log(\"goto2: \" + this.state.goto)\r\n    console.log(\"counter2: \" + counter)\r\n    const questionId = this.state.questionId + 1;\r\n\r\n    console.log(\"counter3: \" + counter)\r\n    console.log(\"goto3: \" + this.state.goto)\r\n\r\n    this.setState({\r\n      counter: counter,\r\n      questionId: questionId,\r\n      question: quizQuestions[counter].question,\r\n      answerOptions: quizQuestions[counter].answers,\r\n      answer: '',\r\n      goto: '',\r\n    });\r\n  }\r\n\r\n  setResults() {\r\n    this.setState({ result: this.state.goto })\r\n  }\r\n\r\n  renderQuiz() {\r\n    if (this.state.answerOptions.length === 0) {\r\n      return (\r\n        <TextInput\r\n          answer={this.state.answer}\r\n          answerOptions={this.state.answerOptions}\r\n          questionId={this.state.questionId}\r\n          question={this.state.question}\r\n          questionTotal={quizQuestions.length}\r\n          onAnswerInput={this.handleAnswerInput}\r\n          onValueChange={this.handleTextChange}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <MultiChoice\r\n          answer={this.state.answer}\r\n          answerOptions={this.state.answerOptions}\r\n          questionId={this.state.questionId}\r\n          question={this.state.question}\r\n          questionTotal={quizQuestions.length}\r\n          onAnswerSelected={this.handleAnswerSelected}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  renderResult() {\r\n    document.getElementById('code').value = this.state.goto\r\n    return <Result handleClick={this.handleClick} />;\r\n  }\r\n\r\n  renderHintHelper(title, content) {\r\n    return <Dialog\r\n      open={this.state.open}\r\n      onClose={this.handleClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n      children={<PopOver content={content} title={title} handleClose={this.handleClose}/>}\r\n    >\r\n    </Dialog>\r\n  }\r\n\r\n  renderHint() {\r\n    if (this.state.question.match(/What is the emergency/i)) {\r\n      return this.renderHintHelper(\"What is the emergency?\", \"This question is meant to gather an initial sense of the situation and is no way an invitation to tell your entire life story. Keep your answer brief, include the number of injured people and their condition and any immediate dangers. The call receiver will ask you specific follow up questions based on your answer in order to get only the important information.\");\r\n    }\r\n    if (this.state.question.match(/department/i)) {\r\n      return this.renderHintHelper(\"Police or Fire\", \"Some geographical areas have different PSAP’s answering different types of calls. For example, all calls that come in the Seattle area are screen to be passed to different PSAP’s based on the type of emergency and the location. So a fire will get sent to the Seattle Fire Department call receivers or a reckless driver on I5 will get sent to the Washington State Patrol. If you get asked this question, be prepared to be transferred to a different call receiver and know that while it may take a few extra seconds, you are going to be getting help from a more specialized call receiver.\");\r\n    }\r\n\r\n    if (this.state.question.match(/where/i)) {\r\n      return this.renderHintHelper(\"Where is the emergency\", \"The tv shows and movies are wrong. When you call 911, the call receiver cannot immediately see where you are calling from. If you are not able to say your location, they can attempt to ping your phone and get an approximate radius of your location but that is rarely helpful in an emergency as you are not always at the same location as the emergency. So, be patient when the call receiver asks for the location of the emergency and always be aware of your location before calling 911.\");\r\n    }\r\n\r\n    if (this.state.question.match(/sex|age/i)) {\r\n      return this.renderHintHelper(\"What is the patient’s age/sex?\", \"This question may seem weird at first glance, but when it comes to medical emergencies the age and sex of a person matter. Unexplained chest pain in a small child is more likely to be an asthma than a cardiac incident, and people of a different sex will exhibit different cardiac symptoms to the same problem. Don’t overcomplicate your answer, feel free to give a general age such as mid 40’s and use your best judgement for the sex of people you do not know.\");\r\n    }\r\n\r\n    if (this.state.question.match(/conscious/i)) {\r\n      return this.renderHintHelper(\"Is the person conscious?\", \"This will be one of the first questions you will be asked in case of a medical emergency. When the call receiver asks this question, they want to know if the person is doing things like making noises and moving. Many callers often confuse this with coherent, which means able to speak and respond normally. If you say no, the call receiver will immediately ask for the highest level of aid called a Medic to your location as the emergency is likely very serious. If you say yes, they will continue to ask you questions so they make sure that only the necessary help is sent. Either way you answer, do it honestly and know that there are a limited number of Medics and that they can be more expensive than the lower level aid cars.\");\r\n    }\r\n    if (this.state.question.match(/telephone/i)) {\r\n      return this.renderHintHelper(\"What is the telephone # you are calling from?\", \"This another example of how Hollywood doesn’t always give accurate depictions of an emergency. While most agencies will have the ability to see your call back number, it is not always accurate. It only takes a second to confirm and it can be useful if the line gets disconnected during the call or the first responders want to contact you on their way the scene.\");\r\n    }\r\n\r\n    return this.renderHintHelper(\"Sorry\", \"No hint here\");\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n          {/* <h1> F.R.I.C </h1> */}\r\n          <TextField\r\n            className={classes.margin}\r\n            InputLabelProps={{\r\n              classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n              },\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            label=\"Phone Number\"\r\n            defaultValue=\"Phone Number\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                width: 140\r\n              }\r\n            }\r\n            id=\"phone\"\r\n          />\r\n          <TextField\r\n            className={classes.margin}\r\n            InputLabelProps={{\r\n              classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n              },\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            label=\"Caller Name\"\r\n            defaultValue=\"Caller Name\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                width: 140\r\n              }\r\n            }\r\n            id=\"caller\"\r\n          />\r\n          <TextField\r\n            className={classes.margin}\r\n            InputLabelProps={{\r\n              classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            rowsMax=\"4\"\r\n            label=\"Patient Sex\"\r\n            defaultValue=\"Patient Sex\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                width: 140\r\n              }\r\n            }\r\n            id=\"sex\"\r\n          />\r\n          <TextField\r\n            className={classes.margin}\r\n            InputLabelProps={{\r\n              classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            rowsMax=\"4\"\r\n            label=\"Patient Age\"\r\n            defaultValue=\"Patient Age\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                width: 130\r\n              }\r\n            }\r\n            id=\"age\"\r\n          />\r\n\r\n          <br />\r\n          <TextField\r\n            className={classes.margin}\r\n            InputLabelProps={{\r\n              classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            multiline\r\n            rowsMax=\"4\"\r\n            label=\"Emergency Location\"\r\n            defaultValue=\"Emergency Location\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                width: 600\r\n              }\r\n            }\r\n            id=\"location\"\r\n          />\r\n          <br />\r\n          <TextField\r\n            className={classes.margin}\r\n            InputLabelProps={{\r\n              classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n              },\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            label=\"Report Incident\"\r\n            defaultValue=\"Report Incident\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                width: 600\r\n              }\r\n            }\r\n            // fullWidth\r\n            id=\"report\"\r\n          />\r\n          <br />\r\n          <TextField\r\n            className={classes.margin}\r\n            InputLabelProps={{\r\n              classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            InputProps={{\r\n              classes: {\r\n                root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n              },\r\n              readOnly: false\r\n            }}\r\n            multiline\r\n            rowsMax=\"4\"\r\n            label=\"Code\"\r\n            defaultValue=\"Code\"\r\n            variant=\"outlined\"\r\n            style={\r\n              {\r\n                width: 300,\r\n              }\r\n            }\r\n            id=\"code\"\r\n          />\r\n       </div>\r\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n        <div style = {{\r\n          display: \"flex\",\r\n          justifyContent: \"flex-end\"\r\n        }\r\n        }>\r\n          <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen} style={\r\n            {\r\n              margin: 20,\r\n            }\r\n          }>\r\n            About This Question\r\n        </Button>\r\n        {this.renderHint()}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(App);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}